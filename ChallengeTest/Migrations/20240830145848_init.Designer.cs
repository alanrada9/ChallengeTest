// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace ChallengeTest.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240830145848_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChallengeService.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("AccountNumber");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Balance");

                    b.Property<DateTime?>("LastWithdrawalDate")
                        .IsRequired()
                        .HasColumnType("datetime2")
                        .HasColumnName("LastWithdrawalDate");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("UserName");

                    b.HasKey("Id");

                    b.ToTable("Account", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3d3f5a9d-1e4e-4eae-a1c0-daa84edb50ef"),
                            AccountNumber = "ACC123456789",
                            Balance = 1000.00m,
                            LastWithdrawalDate = new DateTime(2024, 8, 30, 11, 58, 48, 349, DateTimeKind.Local).AddTicks(4958),
                            UserName = "John Doe"
                        },
                        new
                        {
                            Id = new Guid("6e1b2284-7460-4f5b-8c6b-e6f9d249e7c1"),
                            AccountNumber = "ACC987654321",
                            Balance = 2000.00m,
                            LastWithdrawalDate = new DateTime(2024, 8, 30, 11, 58, 48, 349, DateTimeKind.Local).AddTicks(4974),
                            UserName = "Jane Smith"
                        },
                        new
                        {
                            Id = new Guid("8b8c7b85-11f1-4a6b-9a8b-7b593d7de8c2"),
                            AccountNumber = "ACC112233445",
                            Balance = 1500.00m,
                            LastWithdrawalDate = new DateTime(2024, 8, 30, 11, 58, 48, 349, DateTimeKind.Local).AddTicks(4976),
                            UserName = "Alice Johnson"
                        },
                        new
                        {
                            Id = new Guid("a0d8e517-5e2c-4ecb-8a3f-5e550c9c485d"),
                            AccountNumber = "ACC556677889",
                            Balance = 500.00m,
                            LastWithdrawalDate = new DateTime(2024, 8, 30, 11, 58, 48, 349, DateTimeKind.Local).AddTicks(4978),
                            UserName = "Bob Brown"
                        },
                        new
                        {
                            Id = new Guid("b1e4f70b-29a2-4d52-99c3-e0c09246d839"),
                            AccountNumber = "ACC998877665",
                            Balance = 750.00m,
                            LastWithdrawalDate = new DateTime(2024, 8, 30, 11, 58, 48, 349, DateTimeKind.Local).AddTicks(4979),
                            UserName = "Charlie Davis"
                        });
                });

            modelBuilder.Entity("ChallengeService.Models.Card", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasColumnName("CardNumber");

                    b.Property<int>("FailedAttempts")
                        .HasColumnType("int")
                        .HasColumnName("FailedAttempts");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit")
                        .HasColumnName("IsLocked");

                    b.Property<string>("Pin")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("Pin");

                    b.Property<string>("PlaceHolderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("PlaceHolderName");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Card", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c3758c15-cee4-4c2e-b0e3-c3b1edc0bb7f"),
                            AccountId = new Guid("3d3f5a9d-1e4e-4eae-a1c0-daa84edb50ef"),
                            CardNumber = "1111222233334444",
                            FailedAttempts = 0,
                            IsLocked = false,
                            Pin = "1234",
                            PlaceHolderName = "John Doe"
                        },
                        new
                        {
                            Id = new Guid("8a5a5a46-2cf4-48a1-8f19-49ebb6f6a02f"),
                            AccountId = new Guid("6e1b2284-7460-4f5b-8c6b-e6f9d249e7c1"),
                            CardNumber = "5555666677778888",
                            FailedAttempts = 0,
                            IsLocked = false,
                            Pin = "5678",
                            PlaceHolderName = "Jane Smith"
                        },
                        new
                        {
                            Id = new Guid("052896b8-2502-4cba-a15a-eea16e084133"),
                            AccountId = new Guid("8b8c7b85-11f1-4a6b-9a8b-7b593d7de8c2"),
                            CardNumber = "9999000011112222",
                            FailedAttempts = 0,
                            IsLocked = false,
                            Pin = "9876",
                            PlaceHolderName = "Alice Johnson"
                        },
                        new
                        {
                            Id = new Guid("3931ad9f-3b36-440a-bbb6-8ad76663d4ce"),
                            AccountId = new Guid("a0d8e517-5e2c-4ecb-8a3f-5e550c9c485d"),
                            CardNumber = "3333444455556666",
                            FailedAttempts = 0,
                            IsLocked = false,
                            Pin = "5432",
                            PlaceHolderName = "Bob Brown"
                        },
                        new
                        {
                            Id = new Guid("457b3fa9-a7af-4d25-91d0-fb5a6b199c54"),
                            AccountId = new Guid("b1e4f70b-29a2-4d52-99c3-e0c09246d839"),
                            CardNumber = "7777888899990000",
                            FailedAttempts = 0,
                            IsLocked = false,
                            Pin = "1111",
                            PlaceHolderName = "Charlie Davis"
                        });
                });

            modelBuilder.Entity("Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Amount");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Description");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Transaction", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7af5aee4-fd0b-44d6-b181-507c038a3b02"),
                            AccountId = new Guid("3d3f5a9d-1e4e-4eae-a1c0-daa84edb50ef"),
                            Amount = 100.00m,
                            Date = new DateTime(2024, 8, 25, 11, 58, 48, 349, DateTimeKind.Local).AddTicks(9961),
                            Description = "Deposit"
                        },
                        new
                        {
                            Id = new Guid("4edb9f1e-3ada-44ac-8ef3-59aa152a9145"),
                            AccountId = new Guid("3d3f5a9d-1e4e-4eae-a1c0-daa84edb50ef"),
                            Amount = 50.00m,
                            Date = new DateTime(2024, 8, 27, 11, 58, 48, 349, DateTimeKind.Local).AddTicks(9982),
                            Description = "Withdrawal"
                        },
                        new
                        {
                            Id = new Guid("eb2d53e1-894a-4d44-9a41-f5ae694e6f7b"),
                            AccountId = new Guid("6e1b2284-7460-4f5b-8c6b-e6f9d249e7c1"),
                            Amount = 200.00m,
                            Date = new DateTime(2024, 8, 20, 11, 58, 48, 349, DateTimeKind.Local).AddTicks(9984),
                            Description = "Deposit"
                        },
                        new
                        {
                            Id = new Guid("87e31e8b-d66d-4efe-b2ef-be68bb3a655f"),
                            AccountId = new Guid("6e1b2284-7460-4f5b-8c6b-e6f9d249e7c1"),
                            Amount = 30.00m,
                            Date = new DateTime(2024, 8, 23, 11, 58, 48, 349, DateTimeKind.Local).AddTicks(9987),
                            Description = "Withdrawal"
                        },
                        new
                        {
                            Id = new Guid("af123844-f3e9-40f6-8c70-69aa9ea3828b"),
                            AccountId = new Guid("8b8c7b85-11f1-4a6b-9a8b-7b593d7de8c2"),
                            Amount = 150.00m,
                            Date = new DateTime(2024, 8, 15, 11, 58, 48, 349, DateTimeKind.Local).AddTicks(9990),
                            Description = "Deposit"
                        },
                        new
                        {
                            Id = new Guid("a2cd0a5e-fe71-4e23-b4cc-4f52217510e3"),
                            AccountId = new Guid("8b8c7b85-11f1-4a6b-9a8b-7b593d7de8c2"),
                            Amount = 75.00m,
                            Date = new DateTime(2024, 8, 18, 11, 58, 48, 349, DateTimeKind.Local).AddTicks(9992),
                            Description = "Withdrawal"
                        },
                        new
                        {
                            Id = new Guid("45b8720d-5996-4fe1-937b-6e70afb45bf6"),
                            AccountId = new Guid("a0d8e517-5e2c-4ecb-8a3f-5e550c9c485d"),
                            Amount = 200.00m,
                            Date = new DateTime(2024, 8, 10, 11, 58, 48, 349, DateTimeKind.Local).AddTicks(9994),
                            Description = "Deposit"
                        },
                        new
                        {
                            Id = new Guid("25f74cc9-695c-4579-bfdd-d4653cbf1c56"),
                            AccountId = new Guid("a0d8e517-5e2c-4ecb-8a3f-5e550c9c485d"),
                            Amount = 100.00m,
                            Date = new DateTime(2024, 8, 12, 11, 58, 48, 350, DateTimeKind.Local).AddTicks(1),
                            Description = "Withdrawal"
                        },
                        new
                        {
                            Id = new Guid("90a3a976-fde8-4690-9e63-af6437d71cac"),
                            AccountId = new Guid("b1e4f70b-29a2-4d52-99c3-e0c09246d839"),
                            Amount = 250.00m,
                            Date = new DateTime(2024, 8, 5, 11, 58, 48, 350, DateTimeKind.Local).AddTicks(4),
                            Description = "Deposit"
                        },
                        new
                        {
                            Id = new Guid("78b7f991-5c52-4888-a36d-08298a6e388f"),
                            AccountId = new Guid("b1e4f70b-29a2-4d52-99c3-e0c09246d839"),
                            Amount = 125.00m,
                            Date = new DateTime(2024, 8, 8, 11, 58, 48, 350, DateTimeKind.Local).AddTicks(6),
                            Description = "Withdrawal"
                        });
                });

            modelBuilder.Entity("ChallengeService.Models.Card", b =>
                {
                    b.HasOne("ChallengeService.Models.Account", "Account")
                        .WithMany("Cards")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Transaction", b =>
                {
                    b.HasOne("ChallengeService.Models.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("ChallengeService.Models.Account", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
